"""
Chapter 3 - Python Advanced (3) : Meta Class (2)
Keywords : Type(name, base, dct), Dynamic metaclass
"""
# imports ==============================================================================================================
# ======================================================================================================================
"""  # =================================================================================================================
[ Meta Class ]
1. 메타 클래스 동적 생성에 중요
2. 동적 생성한 메타클래스 -> 커스텀 메타 클래스 생성
3. 의도하는 방향으로 직접 클래스 생성에 관여할 수 있는 큰 장점
"""  # =================================================================================================================

# Ex 1 =================================================================================================================
# type 동적 클래스 생성 예제

# Name(이름), Bases(상속), Dct(속성, 메소드)
s1 = type('Sample1', (), {})  # class 생성, 아래 주석과 같음
"""
class Sample1:
    pass
"""
print("Ex 1 > ", s1)
print("Ex 1 > ", type(s1))
print("Ex 1 > ", s1.__base__)  # every class inherits object class
print("Ex 1 > ", s1.__dict__)
print()


# ======================================================================================================================


# Ex 2 =================================================================================================================
# 동적 생성 + 생성
class Parent1:
    pass


s2 = type(
    'Sample2',
    (Parent1,),
    dict(attr1=100, attr2='hi')  # {'attr1': 100, 'attr2': 'hi'}
)
"""
class Sample2(Parent1):
    attr1 = 100
    attr2 = 'hi'
"""
print("Ex 2 > ", s2)
print("Ex 2 > ", type(s2))
print("Ex 2 > ", s2.__base__)
print("Ex 2 > ", s2.__dict__)
print("Ex 2 > ", s2.attr1, s2.attr2)
print()


# ======================================================================================================================


# Ex 3 =================================================================================================================
# type 동적 클래스 생성 + 메소드
class SampleEx:
    attr1 = 30
    attr2 = 100

    def add(self, m, n):
        return m + n

    def mul(self, m, n):
        return m * n


ex = SampleEx()
print("Ex 3 > ", ex.attr1)
print("Ex 3 > ", ex.attr2)
print("Ex 3 > ", ex.add(100, 200))
print("Ex 3 > ", ex.mul(10, 20))
print("Ex 3 > -----")

s3 = type(
    'Sample3',
    (object,),
    # dict(attr1=300, attr2=100, add=lambda x, y: x + y, mul=lambda x, y: x * y)
    {
        'attr1': 300,
        'attr2': 100,
        'add': lambda x, y: x + y,
        'mul': lambda x, y: x * y
    }
)
print("Ex 3 > ", s3.attr1)
print("Ex 3 > ", s3.attr2)
print("Ex 3 > ", s3.add(300, 200))
print("Ex 3 > ", s3.mul(20, 20))
# ======================================================================================================================
