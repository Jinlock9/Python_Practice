"""
Chapter 2 - Python Advanced (2) : Property (1) - Underscore
Keywords : access modifier (접근 지정자), underscore
"""
# imports ==============================================================================================================
# ======================================================================================================================
"""  # =================================================================================================================
- utilize various underscore
- explain python access modifier
"""  # =================================================================================================================

# Underscore ===========================================================================================================
# usage ----------------------------------------------------------------------------------------------------------------
# 1. Interpreter
# 2. Ignore Value
# 3. Naming (Globalize, Digits)
# ----------------------------------------------------------------------------------------------------------------------
# 2. Ignore Value ------------------------------------------------------------------------------------------------------
# Ex 1 - Unpacking -----------------------------------------------------------------------------------------------------
x, _, y = (1, 2, 3)
a, *_, b = (1, 2, 3, 4, 5)
c, *i, d = (1, 2, 3, 4, 5)
print("Ex 1 > ", x, y, a, b, c, d, i)

# Ex 1.1 - for
for _ in range(10):
    pass

for _, val in enumerate(range(10)):
    pass
print()
# ----------------------------------------------------------------------------------------------------------------------
# 3. Access Modifier ---------------------------------------------------------------------------------------------------
# name : public
# _name : protected
# __name : private
# Python -> public is not compulsory, but following rule is recommended
# 타 클래스 (클래스 변수, 인스턴스 변수 값 쓰기 장려 안함) -> Naming Mangling
# 타 클래스 __name variable 에 접근하지 않는 것이 원칙
# ----------------------------------------------------------------------------------------------------------------------
# ======================================================================================================================


# Not using Property ===================================================================================================
# Ex 2 -----------------------------------------------------------------------------------------------------------------
class SampleA:
    def __init__(self):
        self.x = 0
        self.__y = 0
        self._z = 0


a = SampleA()
a.x = 1

print("Ex 2 > x : {}".format(a.x))
# print("Ex 2 > y : {}".format(a.__y))  # Error!
print("Ex 2 > z : {}".format(a._z))

print("Ex 2 > ", dir(a))  # _SampleA__y

a._SampleA__y = 1
print("Ex 2 > y : {}".format(a._SampleA__y))  # not compulsory, but recommend to follow rule
print()
# ----------------------------------------------------------------------------------------------------------------------
# Ex 3 - utilize method : Getter & Setter ------------------------------------------------------------------------------


class SampleB:
    def __init__(self):
        self.x = 0
        self.__y = 0

    def get_y(self):
        return self.__y

    def set_y(self, value):
        self.__y = value


b = SampleB()
b.x = 1
b.set_y(2)
print("Ex 3 > : {}".format(b.x))
print("Ex 3 > : {}".format(b.get_y()))

# private 변수에 직접 접근시 변수 접근 후 수정 부분에서 일관성 및 가독성이 하락
# b.__SampleB__y = 343

print("Ex 3 > ", dir(b))
# ----------------------------------------------------------------------------------------------------------------------
# ======================================================================================================================
