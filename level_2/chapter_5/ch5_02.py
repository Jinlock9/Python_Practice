# Chapter 05-02 ========================================================================================================
# First Class Function 일급 함수 (일급 객체) ==============================================================================
# Closure Basic --------------------------------------------------------------------------------------------------------
# ======================================================================================================================

# Python variable scope ================================================================================================
# ex 1 -----------------------------------------------------------------------------------------------------------------
def func_v1(a):
    print(a)
    print(b)


# func_v1(10)  # ERROR, there's no b

# ex 2 -----------------------------------------------------------------------------------------------------------------
b = 20


def func_v2(a):
    print(a)
    print(b)


func_v2(10)

# ex 3 -----------------------------------------------------------------------------------------------------------------
c = 30


def func_v3(a):
    global c
    # c = 40
    print(a)
    print(c)
    c = 40


print('>>', c)
func_v3(10)
print('>>>', c)
# ======================================================================================================================

print()
print()

# Closure ==============================================================================================================
# 사용 이유:
# 서버 프로그래밍 -> 동시성 (Concurrency) 제어 -> 메모리 공간에 여러 자원이 접근 -> 교착 상태 (Dead Lock)
# 메모리를 공유하지 않고 메시지 전달로 처리하기 위한 -> Erlang
# 클로저는 공유하되 변경되지 않는 (Immutable, Read Only) 적극적으로 사용 -> 함수형 프로그래밍
# 클로저는 불변자료구조 및 atom, STM -> Multi Thread (Coroutine) 프로그래밍에 강점
# "불변 상태를 기억한다"
# Remembering State ----------------------------------------------------------------------------------------------------
a = 100
print(a + 100)
print(a + 1000)

# 결과 누적 (use Function)
print(sum(range(1, 51)))
print(sum(range(51, 101)))
print()


#  use Class -----------------------------------------------------------------------------------------------------------
class Averager:
    def __init__(self):
        self._series = []

    def __call__(self, v):  # able to use class as function
        self._series.append(v)
        print('inner >> {} / {}'.format(self._series, len(self._series)))
        return sum(self._series) / len(self._series)


# Create Instance
averager_cls = Averager()
print(averager_cls(10))
print(averager_cls(30))
print(averager_cls(50))
# ======================================================================================================================
