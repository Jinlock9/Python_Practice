# Chapter 04-03 ========================================================================================================
# Sequence Type ========================================================================================================
# - Container: 서로 다른 자료형 - list, tuple, collections.deque, etc
# - Flat: 단일 자료형 - str, bytes, bytearray, array.array, memoryview
# ----------------------------------------------------------------------------------------------------------------------
# - Mutable: list, bytearray, array.array, memoryview, deque
# - Immutable: tuple, str, bytes
# ======================================================================================================================

# Hash Table ===========================================================================================================
# Key에 Value를 저장하는 구조
# ex. dict
# structure that can directly access according to the result of calculation on key value
# key 값을 해싱 함수 -> 해쉬 주소 -> key에 대한 value 참조

# Dict Structure -------------------------------------------------------------------------------------------------------
print(__builtins__.__dict__)
print()

# check Hash value (original) ------------------------------------------------------------------------------------------
t1 = (10, 20, (30, 40, 50))
t2 = (10, 20, [30, 40, 50])

print(hash(t1))  # tuple -> immutable -> thus can have hash value
# print(hash(t2))  # ERROR! : list -> mutable -> cannot have hash value
# ======================================================================================================================

print()
print()

# Dict Setdefault Example ==============================================================================================
source = (('k1', 'val1'),
          ('k1', 'val2'),
          ('k2', 'val3'),
          ('k2', 'val4'),
          ('k2', 'val5'))

new_dict1 = {}
new_dict2 = {}

# Not using Setdefault -------------------------------------------------------------------------------------------------
for k, v in source:
    if k in new_dict1:
        new_dict1[k].append(v)
    else:
        new_dict1[k] = [v]
print(new_dict1)

# Using Setdefault -----------------------------------------------------------------------------------------------------
for k, v in source:
    new_dict2.setdefault(k, []).append(v)
print(new_dict2)

# Caution --------------------------------------------------------------------------------------------------------------
new_dict3 = {k: v for k, v in source}  # Wrong! Cannot handle duplicate keys
print(new_dict3)
# ======================================================================================================================
